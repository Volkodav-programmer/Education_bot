from email import message
import re
from aiogram import Bot, Dispatcher, executor, types, utils
from buttons import main_buttons, day_result_buttons
from tasks import pack, unpack, SergeyClass
from config import TOKEN
from datetime import datetime
import shelve


bot = Bot(TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=['start'])
async def greet_sergey(message:types.Message):
    if 'Sergey' not in shelve.open('user/' + str(message.from_user.id)):
        pack(str(message.from_user.id), 'Sergey', SergeyClass())
    await message.answer('–ü—Ä–∏–≤–µ—Ç, –°–µ—Ä–µ–≥.\n–í –∫—É—Ä—Å –¥–µ–ª–∞ —Ç–µ–±—è –≤–≤–æ–¥–∏—Ç—å –Ω–µ –ø—Ä–∏–¥–µ—Ç—Å—è, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?', reply_markup=main_buttons())

@dp.message_handler(commands=['help'])
async def assist(message:types.Message):
    help_text = '''–ó–¥—Ä–∞—Å—Ç–≤—É–π—Ç–µ, —è –≤–∞—à –ª–∏—á–Ω—ã–π –±–æ—Ç-–∂—É—Ä–Ω–∞–ª.
–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å–≤–æ–∏–º–∏ –¥–µ–ª–∞–º–∏ –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ —Å–≤–æ–µ–π —Ä–∞–±–æ—Ç—ã.
–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ –±—ã –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ, –≤–≤–µ–¥–∏—Ç–µ:
/add_task "–ó–∞–¥–∞–Ω–∏–µ"
–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –ø—Ä–æ–ø–∏—à–∏—Ç–µ: 
/add_td_task "–ó–∞–¥–∞–Ω–∏–µ".
–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!)'''
    await message.answer(help_text)

@dp.message_handler(commands=['add_task'])
async def create_task(message:types.Message):
    task = ' '.join(message.text.split()[1:])

    if not task:
        await message.answer('–ü—Ä–µ–¥–ª–∞–≥–∞—é –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—èüòå')
        return

    user = str(message.from_user.id)
    Sergey = unpack(user, 'Sergey')

    if task in Sergey.tasks:
        await message.answer('–¢–∞–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
        return

    msg = Sergey.new_task(task)
    await message.answer(msg)
    pack(user, 'Sergey', Sergey)

@dp.message_handler(commands=['add_td_task'])
async def create_td_task(message:types.Message):
    task = ' '.join(message.text.split()[1:])

    if not task:
        await message.answer('–ü—Ä–µ–¥–ª–∞–≥–∞—é –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—èüòå')
        return

    user = str(message.from_user.id)
    Sergey = unpack(user, 'Sergey')

    if task in Sergey.current_day.tasks:
        await message.answer('–¢–∞–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
        return

    msg = Sergey.current_day.add_task(task)
    await message.answer(msg)
    pack(user, 'Sergey', Sergey)

@dp.message_handler(commands=['del_task'])
async def del_task(message:types.Message):
    user = str(message.from_user.id)
    Sergey = unpack(user, 'Sergey')
    msg = Sergey.delete_task(' '.join(message.text.split()[1:]))
    await message.answer(msg)
    pack(user, 'Sergey', Sergey)
    
@dp.message_handler(commands=['del_td_task'])
async def del_task(message:types.Message):
    user = str(message.from_user.id)
    Sergey = unpack(user, 'Sergey')
    msg = Sergey.current_day.delete_task(' '.join(message.text.split()[1:]))
    await message.answer(msg)
    pack(user, 'Sergey', Sergey)

@dp.message_handler(commands=['new'])
async def new_Sergey(message:types.Message):
    await message.answer('–•–∏—Ç—Ä—é–≥–∞)')
    pack(str(message.from_user.id), 'Sergey', SergeyClass())
    await message.answer('–ù–æ–≤—ã–π –°–µ—Ä–≥–µ–π —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω')

@dp.message_handler(content_types=['text'])
async def Education_bot(message:types.Message):
    text = message.text
    sergey_id = str(message.from_user.id)
    Sergey = unpack(sergey_id, 'Sergey')

    if text == '–ù–∞—á–∞—Ç—å –¥–µ–Ω—å':
        await start_Sergeys_day(message, Sergey)

    elif text == '–ü–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏':
        await Sergey_day_results(message, Sergey)

    elif text == '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É':
        await show_Sergey_results(message, Sergey)
    
    elif text == '–ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–µ–Ω—å':
        await end_Sergeys_day(message, Sergey)

    pack(sergey_id, 'Sergey', Sergey)


@dp.callback_query_handler(lambda x: x.data in unpack(str(x.from_user.id), 'Sergey').current_day.tasks)
async def day_result(callback:types.CallbackQuery):
    Sergey = unpack(str(callback.from_user.id), 'Sergey')

    await bot.answer_callback_query(callback.id)
    await bot.send_message(callback.from_user.id, Sergey.current_day.complete_task(callback.data))
    
    pack(str(callback.from_user.id), 'Sergey', Sergey)

async def start_Sergeys_day(message:types.Message, Sergey:SergeyClass):
    if datetime.now().strftime('%d.%m.%Y') != Sergey.current_day.date:
        Sergey.start_day()
        await message.answer('–£—Ç—Ä–µ—á–∫–∞)')
    else:
        await message.answer('–î–∞–π –ø—Ä–æ—à–ª–æ–º—É –¥–Ω—é –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è, –¥—É—Ä–µ—Ö–∞ :)')


async def Sergey_day_results(message:types.Message, Sergey:SergeyClass):
    tasks = Sergey.current_day.tasks

    if len(tasks) == 0:
        await message.answer('–ú–æ–∂–µ—Ç, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–∏—à—å?)')
        return

    if list(tasks.values()).count('‚úñÔ∏è') != 0:
        await bot.send_message(message.from_user.id, '–î–∞, –Ω—É –∏ —á—Ç–æ —Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è —Å–¥–µ–ª–∞–ª?', reply_markup=day_result_buttons(list(Sergey.current_day.tasks.keys()), Sergey))
    else:
        await message.answer('–ù—É —Ç—ã –≤—Ä–æ–¥–µ –≤—Å–µ —Å–µ–≥–æ–¥–Ω—è —Å–¥–µ–ª–∞–ª(–∞), –º–æ–∂–µ—à—å –ø–æ–π—Ç–∏ –∏ –æ–±–Ω—è—Ç—å –∫–æ–≥–æ –Ω–∏–±—É–¥—å))')

async def show_Sergey_results(message:types.Message, Sergey:SergeyClass):
    await message.answer(Sergey.show_stat())

async def end_Sergeys_day(message:types.Message, Sergey:SergeyClass):

    if not Sergey.current_day.is_ended:
        Sergey.end_day()
    else:
        await message.answer('–î–∞ –ø–æ–Ω—è–ª, —è, –ø–æ–Ω—è–ª, –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–π—Å—è(', reply_markup=main_buttons())
        return

    await message.answer('–•–æ—Ä–æ—à–∏–π –±—ã–ª –¥–µ–Ω–µ–∫...')
    pack(str(message.from_user.id), 'Sergey', Sergey)

try:
    executor.start_polling(dp, skip_updates=True)
except utils.exceptions.NetworkError:
    print("Low connection")